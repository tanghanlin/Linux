exm: 
std::cout << "Enter two numbers:" << std::endl;
等价
std::cout << "Enter two numbers:";
std::cout << std::endl;
1. << 
为输出操作符，写入到流
其中的含义为 <<右边的操作数所产生的值赋给了左边的操作数，且左边的操作数必须是ostream对象

2.endl
endl成为操纵符，当写入ostream时，具有输出换行的效果，并刷新缓冲区，用户可以看到写入到流中的输出
endl即表示输出结束，同时有换行的作用，所以如果在输出中不想换行，可以不加endl。

3.count 和 endl 是定义在命名空间std中的

exm: 
std:: >> v1 >> v2;
等价
std::cin >> v1;
std::cin >> v2;

1. >> 
为输入操作符，读入流
其中的含义为 >>左边的操作数所产生的值赋给了右边的操作数，且左边的操作数必须是istream对象，即输入之后赋值给了v1,v2

通过win系统上的crtl + z 或者 linux系统的 crtl + d 可以跳出带输入的while循环，ctrl + z or ctrl + d 为文件结束符。

使用unsigned,double,long(int)在大多数情况下是最优的

在初始化变量时，可以用 = ，也可以用 ()来进行初始化
初始化和赋值语句有细微的差别，事实上用()赋值更加方便且高效
for循环中使用的变量要是想在for结束之后使用，需要在for循环前声明该变量
exm:
string str(10, '9');//重复9的字符串10次，输出为9999999999，而这种初始化变量只能由()语句构成

声明用于向程序表明变量的类型和名字。定义也是声明:当定义变量时我们声明了它的类型和名字。可以通过使用 extern 关键字声明变量名而不定义它。不定义变量的声明包括对象名、对象类型和对象类型前的关键字 extern:
extern int i;  // declares but does not define i
int i;  // declares and defines i
extern 声明不是定义,也不分配存储空间。事实上,它只是说明变量定义在程序的其他地方。程序中变量可以声明多次,但只能定义一次。

const定义,const int a = 5; 此时变量a将作为一个常数不可以再被更改，任何试图更改a值的行为都会报错，并且因为声明后便无法修改其变量(常数)的值，因此才使用const语句时必须初始化

引用& ,引用即引用已经存在的变量参数
exm:
int a = 5;
int &test_a = a;
a = 7;
std::cout<<test_a<<std::endl;
test_a = 10;
std::cout<<a<<std::endl;
此时可以看到输出值为7,10,即改变变量参数，引用参数也会相应的改变,经测试,无法将const int 类型赋值给引用参数。同时,改变引用参数的值，原变量的值也会随之改变。

typedef 用来定义数据类型,即int double char等等，exm: typedef(means define type)typedef int a，即a可以代替int 作为数据类型使用, a number numbers;(means int number and int numbers)

enum为枚举,即定义大括号内的变量作为常数。enum books {name=1, money, where, test1, test=3};若没有赋值，则后一个成员的值为前一个值+1，这里依次为1,2,3,4,3

struct 的成员都是 public,除非有其他特殊的声明,所以就没有必要添加 public 标号。而class需要在花括号中添加private以及public。
用 class 和 struct 关键字定义类的唯一差别在于默认访问级别:默认情况下,struct 的成员为 public,而 class 的成员为 private。
头文件为相关声明提供了一个集中存放的位置。头文件一般包含类的定义、extern 变量的声明和函数的声明

#include 指示接受以下两种形式:
	#include <standard_header>
	#include "my_file.h"


使用预处理器定义头文件保护符，可以使用这些设施来预防多次包含同一头文件:
#ifndef SALESITEM_H
#define SALESITEM_H
// Definition of Sales_itemclass and related functions goes here
#endif

标准库有string,vector,bitset等
string初始化变量
string s1; 默认构造函数 s1 为空串
string s2(s1); 将 s2 初始化为 s1 的一个副本
string s3("value"); 将 s3 初始化为一个字符串字面值副本
string s4(n, 'c');

将 s4 初始化为字符 'c' 的 n 个副本

列出了常用的 string 操作。
s.empty() 如果 s 为空串,则返回 true,否则返回 false。
s.size() 返回 s 中字符的个数
s[n] 返回 s 中位置为 n 的字符,位置从 0 开始计数
s1 + s2 把 s1 和 s2 连接成一个新字符串,返回新生成的字符串
s1 = s2 把 s1 内容替换为 s2 的副本
v1 == v2 比较 v1 与 v2 的内容,相等则返回 true,否则返回 false
!=, <, <=, >, and >= 保持这些操作符惯有的含义
看到了page126


