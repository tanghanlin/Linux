exm: 
std::cout << "Enter two numbers:" << std::endl;
等价
std::cout << "Enter two numbers:";
std::cout << std::endl;
1. << 
为输出操作符，写入到流
其中的含义为 <<右边的操作数所产生的值赋给了左边的操作数，且左边的操作数必须是ostream对象

2.endl
endl成为操纵符，当写入ostream时，具有输出换行的效果，并刷新缓冲区，用户可以看到写入到流中的输出
endl即表示输出结束，同时有换行的作用，所以如果在输出中不想换行，可以不加endl。

3.count 和 endl 是定义在命名空间std中的

exm: 
std:: >> v1 >> v2;
等价
std::cin >> v1;
std::cin >> v2;

1. >> 
为输入操作符，读入流
其中的含义为 >>左边的操作数所产生的值赋给了右边的操作数，且左边的操作数必须是istream对象，即输入之后赋值给了v1,v2

通过win系统上的crtl + z 或者 linux系统的 crtl + d 可以跳出带输入的while循环，ctrl + z or ctrl + d 为文件结束符。

使用unsigned,double,long(int)在大多数情况下是最优的

在初始化变量时，可以用 = ，也可以用 ()来进行初始化
初始化和赋值语句有细微的差别，事实上用()赋值更加方便且高效
for循环中使用的变量要是想在for结束之后使用，需要在for循环前声明该变量
exm:
string str(10, '9');//重复9的字符串10次，输出为9999999999，而这种初始化变量只能由()语句构成

声明用于向程序表明变量的类型和名字。定义也是声明:当定义变量时我们声明了它的类型和名字。可以通过使用 extern 关键字声明变量名而不定义它。不定义变量的声明包括对象名、对象类型和对象类型前的关键字 extern:
extern int i;  // declares but does not define i
int i;  // declares and defines i
extern 声明不是定义,也不分配存储空间。事实上,它只是说明变量定义在程序的其他地方。程序中变量可以声明多次,但只能定义一次。

const定义,const int a = 5; 此时变量a将作为一个常数不可以再被更改，任何试图更改a值的行为都会报错，并且因为声明后便无法修改其变量(常数)的值，因此才使用const语句时必须初始化
看到了page86

