NVIC中断优先级分组，为系统级别的分组
    CM4内核支持256个中断，STM32F40XX有92个中断，10个内核中断和82个可屏蔽中断，常用82个可屏蔽中断
    分组配置是在寄存器SCB->AIRCR中配置:
        每一个中断都有IP寄存器
        组 AIRCR[10:8] IP bit[7:4]分配情况 分配结果
        0    111           0:4              0位抢占优先级，4位响应优先级
        1    110           1:3              1位抢占优先级，3位响应优先级
        2    101           2:2              2位抢占优先级，2位响应优先级
        3    100           3:1              3位抢占优先级，1位响应优先级
        4    011           4:0              4位抢占优先级，0位响应优先级
例如组2: 抢占优先级只能设置级别0，1，2，3，响应优先级只能设置级别0，1，2，3。即00，01，10，11
一般情况下，系统只设置一次分组配置，对所有中断实行上述分组办法。之后随意改变会导致中断管理混乱

抢占优先级 & 响应优先级
    数字越小，优先级越高
    高抢占优先级可以打断低抢占优先级
    当抢占优先级相同时，高响应优先级不存在打断低响应优先级的中断关系，在同时发生时，可先发生高响应优先级
    当响应优先级相同时，看谁先发生

NVIC中断优先级设置
    每个IP寄存器的高速4位用来设置抢占和响应优先级，低4位没有用到
    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)

    //在core_cm4.h中可以查找到
    中断使能寄存器组: ISER[8]   用来使能中断
        从STM32只有82个可屏蔽中断，所以只用到了ISER[0]-ISER[2]
        ISER[0]的bit0~bit31对应中断0~31
        ISER[1]的bit0~bit27对应中断32~63  
        ISER[2]的bit0~bit17对应中断64~81
    中断失能寄存器组: ISER[8]   用来失能中断 配置跟ISER一样
    中断挂起控制寄存器组: ISPR[8]    用来挂起中断
    中断解挂控制寄存器组: ICPR[8]    用来解挂中断
    中断激活标志位寄存器组: IABR[8]    只读，通过它可以知道当前执行的中断是哪一个，如果位为1，说明该中断正在执行


中断参数初始化函数
/*
typedef struct
{
  uint8_t NVIC_IRQChannel; //设置中断通道
  uint8_t NVIC_IRQChannelPreemptionPriority;//设置响应优先级
  uint8_t NVIC_IRQChannelSubPriority; //设置抢占优先级
  FunctionalState NVIC_IRQChannelCmd; //使能/使能
} NVIC_InitTypeDef;
*/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);

NVIC_InitTypeDef   NVIC_InitStructure;
NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断
NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=1 ;// 抢占优先级为1
NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;// 子优先级位2
NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//IRQ通道使能
NVIC_Init(&NVIC_InitStructure);	//根据上面指定的参数初始化NVIC寄存器


中断优先级设置步骤
    系统运行后先设置中断优先级分组。调用函数：
        void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);
        //中断优先级分组函数
        //整个系统执行过程中，只设置一次中断分组。
    针对每个中断，设置对应的抢占优先级和响应优先级：
        void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);
    如果需要挂起/解挂，查看中断当前激活状态，分别调用相关函数即可。
